AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Parameters:
  DomainName:
    Type: String

  HostedZoneId:
    Type: String

Resources:
#  ItemUpdatesTopic:
#    Type: AWS::SNS::Topic
#    Properties:
#      Subscription:
#        - Subscription

  Certificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Sub "api.${DomainName}"
      DomainValidationOptions:
        - DomainName: !Sub "api.${DomainName}"
          HostedZoneId: !Ref HostedZoneId
      ValidationMethod: DNS

  Gateway:
    Type: AWS::Serverless::HttpApi
    Properties:
      Auth:
        Authorizers:
          CognitoAuthorizer:
            IdentitySource: $request.header.Authorization
            JwtConfiguration:
              issuer: https://cognito-idp.eu-west-1.amazonaws.com/eu-west-1_sJ3Y4kSv6   # TODO move cognito creation to this repo and use Ref here
              audience: 68v5rahd0sdvrmf7fgbq2o1a9u
        DefaultAuthorizer: CognitoAuthorizer
      CorsConfiguration:
        AllowHeaders:
          - "authorization"
          - "content-type"
        AllowMethods:
          - "GET"
          - "POST"
          - "PUT"
          - "DELETE"
        AllowOrigins:
          - !Sub "https://${DomainName}"
      DisableExecuteApiEndpoint: true
      Domain:
        CertificateArn: !Ref Certificate
        DomainName: !Sub "api.${DomainName}"
        EndpointConfiguration: REGIONAL
        Route53:
          HostedZoneId: !Ref HostedZoneId
        SecurityPolicy: TLS_1_2

  ApiLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: api
      ContentUri: src/layers/api
      CompatibleRuntimes:
        - python3.9
    Metadata:
      BuildMethod: python3.9

  DatabasesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: databases
      ContentUri: src/layers/databases
      CompatibleRuntimes:
        - python3.9
    Metadata:
      BuildMethod: python3.9

  UtilsLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: utils
      ContentUri: src/layers/utils
      CompatibleRuntimes:
        - python3.9
    Metadata:
      BuildMethod: python3.9

  FunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: database
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Query
                  - dynamodb:UpdateItem
                Resource:
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/reviews"
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/reviews/index/*"

  ApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/lambdas/api/watch_histories
#      Environment: Environment
      Events:
        ApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref Gateway
            Auth:
              Authorizer: CognitoAuthorizer
            Method: ANY
            Path: /{proxy+}
      Handler: handler
      Layers:
        - !Ref ApiLayer
        - !Ref DatabasesLayer
        - !Ref UtilsLayer
      MemorySize: 1024
      Role: !GetAtt FunctionRole.Arn
      Runtime: python3.9
      Timeout: 10